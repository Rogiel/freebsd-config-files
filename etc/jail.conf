# The directory which is to be the root of the jail.  Any commands
# run inside the jail, either by jail or from jexec(8), are run
# from this directory.
path = "/usr/jails/${name}";

# The hostname of the jail. Other similar parameters are
# host.domainname, host.hostuuid and host.hostid.
host.hostname = "${name}";

# Run commands in a clean environment
exec.clean;

# The user to run commands as, when running in the system environ-
# ment.  The default is to run the commands as the current user.
exec.system_user = "root";

# The user to run commands as, when running in the jail environ-
# ment.  The default is to run the commands as the current user.
exec.jail_user = "root";

# The maximum amount of time to wait	for a command to complete, in
# seconds. If a command is still running after this timeout has
# passed, the jail will not be created or removed, as appropriate.
exec.timeout = 10;

# Command(s) to run in the jail environment when a jail is created.
# A typical command to run is ``sh /etc/rc''.
exec.start += "/bin/sh /etc/rc";

# The maximum amount of time to wait for a jail's processes to exit
# after sending them a SIGTERM signal (which happens after the
# exec.stop commands have completed). After this many seconds have
# passed, the jail will be removed, which will kill any remaining
# processes. If this is set to zero, no SIGTERM is sent and the
# jail is immediately removed. The default is 10 seconds.
stop.timeout = 10;

# Command(s) to run in the jail environment before a jail is
# removed, and after any exec.prestop commands have completed.  A
# typical command to run is ``sh /etc/rc.shutdown''.
exec.stop = "/bin/sh /etc/rc.shutdown";

# A file to direct command output (stdout and stderr) to.
exec.consolelog = "/var/log/jail/${name}_console.log";

# The value of the jail's kern.securelevel sysctl.  A jail never
# has a lower securelevel than its parent system, but by setting
# this parameter it may have a higher one.  If the system
# securelevel is changed, any jail securelevels will be at least as
# secure.
# securelevel = 0;

# A filesystem to mount before creating the jail (and to unmount
# after removing it), given as a single fstab(5) line.
# mount = "";

# An fstab(5) format file containing filesystems to mount before
# creating a jail.
# mount.fstab = "/usr/jails/etc/fstab.$name";

# Mount a devfs(5) filesystem on the chrooted /dev directory, and
# apply the ruleset in the devfs_ruleset parameter (or a default of
# ruleset 4: devfsrules_jail) to restrict the devices visible
# inside the jail.
mount.devfs;

# The number of the devfs ruleset that is enforced for mounting
# devfs in this jail.  A value of zero (default) means no ruleset
# is enforced.  Descendant jails inherit the parent jail's devfs
# ruleset enforcement.  Mounting devfs inside a jail is possible
# only if the allow.mount and allow.mount.devfs permissions are
# effective and enforce_statfs is set to a value lower than 2.
# Devfs rules and rulesets cannot be viewed or modified from inside
# a jail.
#
# NOTE: It is important that only appropriate device nodes in devfs
# be exposed to a jail; access to disk devices in the jail may per-
# mit processes in the jail to bypass the jail sandboxing by modi-
# fying files outside of the jail.  See devfs(8) for information on
# how to use devfs rules to limit access to entries in the per-jail
# devfs.  A simple devfs ruleset for jails is available as ruleset
# #4 in /etc/defaults/devfs.rules.
# devfs_ruleset = /etc/defaults/devfs.rules;

# privileged users inside the jail will be able to mount
# and unmount file system types marked as jail-friendly.
# The lsvfs(1) command can be used to find file system
# types available for mount from within a jail. This per-
# mission is effective only if enforce_statfs is set to a
# value lower than 2.
allow.mount;

# The jail's hostname may be changed via hostname(1) or
# sethostname(3).
allow.set_hostname = 0;

# A process within the jail has access to System V IPC
# primitives.  In the current jail implementation, System V
# primitives share a single namespace across the host and
# jail environments, meaning that processes within a jail
# would be able to communicate with (and potentially inter-
# fere with) processes outside of the jail, and in other
# jails.
allow.sysvipc = 0;

# The jail root is allowed to create raw sockets.  Setting
# this parameter allows utilities like ping(8) and
# traceroute(8) to operate inside the jail. If this is
# set, the source IP addresses are enforced to comply with
# the IP address bound to the jail, regardless of whether
# or not the IP_HDRINCL flag has been set on the socket.
# Since raw sockets can be used to configure and interact
# with various network subsystems, extra caution should be
# used where privileged access to jails is given out to
# untrusted parties.
allow.raw_sockets = 0;

# Normally, privileged users inside a jail are treated as
# unprivileged by chflags(2).  When this parameter is set,
# such users are treated as privileged, and may manipulate
# system file flags subject to the usual constraints on
# kern.securelevel.
allow.chflags = 0;

# The jail root may administer quotas on the jail's
# filesystem(s).  This includes filesystems that the jail
# may share with other jails or with non-jailed parts of
# the system.
allow.quotas = 0;

# Sockets within a jail are normally restricted to IPv4,
# IPv6, local (UNIX), and route.  This allows access to
# other protocol stacks that have not had jail functional-
# ity added to them.
allow.socket_af = 0;

# Control the availability of IPv4/6 addresses.  Possible values are
# ``inherit'' to allow unrestricted access to all system addresses,
# ``new'' to restrict addresses via ip4.addr, and ``disable'' to
# stop the jail from using IPv4 entirely. Setting the ip4.addr
# parameter implies a value of ``new''.
ip4 = new;
ip6 = new;

# Jail definitions
jail1 {
  # A list of IPv4/6 addresses assigned to the jail. If this is set,
  # the jail is restricted to using only these addresses. Any
  # attempts to use other addresses fail, and attempts to use wild-
  # card addresses silently use the jailed address instead. For IPv4
  # the first address given will be used as the source address when
  # source address selection on unbound sockets cannot find a better
  # match. I tis only possible to start multiple jails with the same
  # IP address if none of the jails has more than this single over-
  # lapping IP address assigned to itself.
  ip4.addr = lo1|127.1.0.2;
  # ip6.addr = lo1|...;
}
